/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    // Returns true if the i-th bit of x is 1, else false
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (0 - x);
        } else {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int absX, absY, sum, shiftedX, i;
        var boolean isXNeg, isYNeg;
        if (x < 0) {
            let absX = Math.abs(x);
            let isXNeg = true;
        } else {
            let absX = x;
            let isXNeg = false;
        }

        if (y < 0) {
            let absY = Math.abs(y);
            let isYNeg = true;
        } else {
            let absY = y;
            let isYNeg = false;
        }

        let sum = 0;
        let shiftedX = absX;
        let i = 0;

        while (i < 16) {
            if (Math.bit(absY, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        if ((isXNeg & ~isYNeg) | (~isXNeg & isYNeg)) {
            return -sum;
        } else {
            return sum;
        }
    }

    // /** Returns the integer part of x/y.
    //  *  When a Jack compiler detects the multiplication operator '/' in the
    //  *  program's code, it handles it by invoking this method. In other words,
    //  *  the Jack expressions x/y and divide(x,y) return the same value.
    //  */
    function int divide(int x, int y) {
        var int absX, absY, q, result;
        var boolean isXNeg, isYNeg;
        if (x < 0) {
            let absX = Math.abs(x);
            let isXNeg = true;
        } else {
            let absX = x;
            let isXNeg = false;
        }

        if (y < 0) {
            let absY = Math.abs(y);
            let isYNeg = true;
        } else {
            let absY = y;
            let isYNeg = false;
        }

        if ((absY > absX) | (absY < 0)) {
            return 0;
        }

        let q = Math.divide(absX, absY + absY);

        if ((absX - ((q + q) * absY)) < absY) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if ((isXNeg & ~isYNeg) | (~isXNeg & isYNeg)) {
            return -result;
        } else {
            return result;
        }
    }

    // /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, a;

        let y = 0;
        let j = 7;  // n/2-1

        while ((j + 1) > 0) {
            let a = y + twoToThe[j];
            if ((a * a - 1 < x) & (a * a > 0)) {
                let y = a;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } if (a < b) {
            return b;
        } else {
            return 0;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } if (a > b) {
            return b;
        } else {
            return 0;
        }
    }
}
