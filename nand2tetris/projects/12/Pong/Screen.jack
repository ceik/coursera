/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let color = true;

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        // let twoToThe[15] = 32767;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, value, targetBit;

        let addr = 16384 + (32 * y) + (x / 16);
        let value = Memory.peek(addr);
        let targetBit = x - ((x / 16) * 16);

        if (color) {
            let value = value | twoToThe[targetBit];
            // let value = value | 1;
        } else {
            let value = value & (~twoToThe[targetBit]);
        }

        do Memory.poke(addr, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, start, absDX, absDY;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        let absDX = Math.abs(dx);
        let absDY = Math.abs(dy);

        // horizontal line
        if (dy = 0) {
            let start = Math.min(x1, x2);
            while (a < absDX) {
                do Screen.drawPixel(start + a, y1);
                let a = a + 1;
            }
        }

        // vertical line
        if (dx = 0) {
            let start = Math.min(y1, y2);
            while (b < absDY) {
                do Screen.drawPixel(x1, start + b);
                let b = b + 1;
            }
        }

        // downward right sloping line
        if (dy > 0 & dx > 0) {
            while ((b < dy) | (a < dx)) {
                do Screen.drawPixel(x1 + a, y1 + b);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        // downward left sloping line
        if (dy > 0 & dx < 0) {
            while ((b < dy) | (a < absDX)) {
                do Screen.drawPixel(x1 - a, y1 + b);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - absDX;
                }
            }
        }

        // uoward left sloping line
        if (dy < 0 & dx < 0) {
            while ((b < absDY) | (a < absDX)) {
                do Screen.drawPixel(x1 - a, y1 - b);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + absDY;
                } else {
                    let b = b + 1;
                    let diff = diff - absDX;
                }
            }
        }

        // upward right sloping line
        if (dy < 0 & dx > 0) {
            while ((b < absDY) | (a < dx)) {
                do Screen.drawPixel(x1 + a, y1 - b);

                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + absDY;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int currY;
        let currY = y1;

        while (currY < y2) {
            do Screen.drawLine(x1 - 1, currY, x2, currY);
            let currY = currY + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rSqrd, base;
        let dy = -r;
        let rSqrd = r * r;

        // prevent stack overflow
        if (r > 181) {
            return;
        }

        while (dy < r) {
            let base = Math.sqrt(rSqrd - (dy * dy));
            do Screen.drawLine(x - base, y + dy, x + base, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
