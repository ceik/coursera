/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(Math.max(maxLength, 1));
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length - 1] = 0;
        let length = length - 1;
        return;

    }

    method void clearString() {
        while (length > 0) {
            do eraseLastChar();
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean isNeg;
        let val = 0;
        let i = 0;

        if (str[0] = 45) {
            let isNeg = true;
            let i = 1;
        }

        while (i < length) {
            let d = str[i] - 48;
            let val = val * 10 + d;
            let i = i + 1;
        }

        if (isNeg) {
            let val = -val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        do clearString();
        if (val < 0) {
            // append a "-"
            do appendChar(45);
        }
        do append(String.int2str(Math.abs(val)));
        return;
    }

    function String int2str(int val) {
        var int lastDigit;
        var String s;
        // lastDigit % 10
        let lastDigit = val - ((val / 10) * 10);
        let s = String.new(10);
        if (val < 10) {
            return s.appendChar(lastDigit + 48);
        } else {
            let s = String.int2str(val / 10);
            return s.appendChar(lastDigit + 48);
        }

    }

    method void append(String s) {
        var int i;
        let i = 0;
        while (i < s.length()) {
            do appendChar(s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
